/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 10 09:01:56 GMT 2025
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BankAccount_ESTest extends BankAccount_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount();
      bankAccount0.deposit(1823);
      assertEquals(1823, bankAccount0.getBalance());
      
      bankAccount0.withdraw(1823);
      assertEquals(0, bankAccount0.getBalance());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount();
      bankAccount0.deposit(1);
      bankAccount0.withdraw(0);
      assertEquals(1, bankAccount0.getBalance());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount();
      bankAccount0.deposit(0);
      assertEquals(0, bankAccount0.getBalance());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount();
      // Undeclared exception!
      try { 
        bankAccount0.withdraw(3671);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insufficient funds
         //
         verifyException("BankAccount", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount();
      // Undeclared exception!
      try { 
        bankAccount0.withdraw((-2569));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Amount must be positive
         //
         verifyException("BankAccount", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount();
      // Undeclared exception!
      try { 
        bankAccount0.deposit((-1768));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Amount must be positive
         //
         verifyException("BankAccount", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount();
      bankAccount0.deposit(1);
      int int0 = bankAccount0.getBalance();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount();
      int int0 = bankAccount0.getBalance();
      assertEquals(0, int0);
  }
}
